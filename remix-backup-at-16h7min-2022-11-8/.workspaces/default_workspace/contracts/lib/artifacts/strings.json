{
	"deploy": {
		"VM:-": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"main:1": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"ropsten:3": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"rinkeby:4": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"kovan:42": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"goerli:5": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"Custom": {
			"linkReferences": {},
			"autoDeployLib": true
		}
	},
	"data": {
		"bytecode": {
			"linkReferences": {},
			"object": "604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820c417ebb49ecb810b2905b0006c76089608572e59f71e4a239d5bec03d6e610560029",
			"opcodes": "PUSH1 0x4C PUSH1 0x2C PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH1 0x1C JUMPI PUSH1 0x1E JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN STOP PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xc4 OR 0xeb 0xb4 SWAP15 0xcb DUP2 SIGNEXTEND 0x29 SDIV 0xb0 STOP PUSH13 0x76089608572E59F71E4A239D5B 0xec SUB 0xd6 0xe6 LT JUMP STOP 0x29 ",
			"sourceMap": "2042:23470:0:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
		},
		"deployedBytecode": {
			"linkReferences": {},
			"object": "73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820c417ebb49ecb810b2905b0006c76089608572e59f71e4a239d5bec03d6e610560029",
			"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xc4 OR 0xeb 0xb4 SWAP15 0xcb DUP2 SIGNEXTEND 0x29 SDIV 0xb0 STOP PUSH13 0x76089608572E59F71E4A239D5B 0xec SUB 0xd6 0xe6 LT JUMP STOP 0x29 ",
			"sourceMap": "2042:23470:0:-;;;;;;;;"
		},
		"gasEstimates": {
			"creation": {
				"codeDepositCost": "15200",
				"executionCost": "116",
				"totalCost": "15316"
			},
			"internal": {
				"beyond(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"compare(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"concat(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"contains(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"copy(struct strings.slice memory)": "infinite",
				"count(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"empty(struct strings.slice memory)": "infinite",
				"endsWith(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"equals(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"find(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"findPtr(uint256,uint256,uint256,uint256)": "infinite",
				"join(struct strings.slice memory,struct strings.slice memory[] memory)": "infinite",
				"keccak(struct strings.slice memory)": "infinite",
				"len(bytes32)": "infinite",
				"len(struct strings.slice memory)": "infinite",
				"memcpy(uint256,uint256,uint256)": "infinite",
				"nextRune(struct strings.slice memory)": "infinite",
				"nextRune(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"ord(struct strings.slice memory)": "infinite",
				"rfind(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"rfindPtr(uint256,uint256,uint256,uint256)": "infinite",
				"rsplit(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"rsplit(struct strings.slice memory,struct strings.slice memory,struct strings.slice memory)": "infinite",
				"split(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"split(struct strings.slice memory,struct strings.slice memory,struct strings.slice memory)": "infinite",
				"startsWith(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"toSlice(string memory)": "infinite",
				"toSliceB32(bytes32)": "infinite",
				"toString(struct strings.slice memory)": "infinite",
				"until(struct strings.slice memory,struct strings.slice memory)": "infinite"
			}
		},
		"methodIdentifiers": {}
	},
	"abi": []
}